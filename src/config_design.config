%% Cloudant_benchmark config changes design review 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Sample multi-benchmark config file: 
%%
%% Common values are set in the general environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

{mode, max}.
{duration, 1}.
{report_interval, 10}.
{concurrent, 8}.
{log_level, debug}.

%% "worker_types" would provide per-worker config list
%%     miniature copy of current config file for what is different from global

{worker_types, [
   %% Each worker_type can have its own list of config options, key_gen and value_gen
   %% but through template EV subst could be written to share the same values at runtime
   {file_io_worker, [{driver, cb_driver_file_io},
                     {operations, [
                         {write,1}
                         ]},
                     {test_file_name, foo},
                     {iterations, 100},
                     {key_generator, {int_to_str, {uniform_int, 100}}},
                     {value_generator, {fixed_bin, 64}}
                   ]},
   {folsom_worker, [{driver, cb_driver_folsom},
                     {operations, [
                         {put10,1}
                         ]},
                     {source_dir, "/home/vagrant/git/perf.migration/bench/histo"},
                     {test_engine_dir, "/home/vagrant/git/perf.migration/bench/histo"},
                     {key_generator, {int_to_str, {uniform_int, 100}}},
                     {value_generator, {fixed_bin, 1000}}
                   ]}
   ]}.

%% workers defines the proportions of which workers to make, in this case 1:3, file_io to folsom
{workers, [
   {file_io_worker, 1},
   {folsom_worker, 3}
   ]}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% IMPLEMENTATION:
%% The "concurrent" property picks how many workers but use workers weights for proportions needed. 
%%
%% basho_bench_config
%%    state: saves worker_types into state
%%
%%    (call)next_worker: pops worker_name off weighted list based on "workers" proportions
%%
%%    workers_tuple: Expand worker types list into tuple for weighted, random draw by next_worker
%%
%% basho_bench_worker
%%  init:
%%    if next_worker is defined then 
%%        looks up worker type to get per-worker-type config as LocalConfig
%%        uses config_get(Key, LocalConfig) for initialization
%%        stores LocalConfig into state and Process Dictionary for future use
%%        benchmark applications can use config_get and then save values into own driverState
%% 
%%  config_get(Key, Default)
%%    Can obtain LocalConfig from the Process Dictionary if not provided 
%%    checks LocalConfig first then uses basho_bench_config:get for global defaults
%%    uses lookup_value in support of finding values within the LocalConfig
%%
%%  worker_next_op2 - looks up keygen and valuegen
%%
%%  worker_next_op - manages op names differently using localconfig
%%
%% basho_bench_stats
%%    worker_op_name: Generates concatenated worker name (atom-UGLY)
%%
%%    get_active_ops - determines worker_ops by processing worker_types if provided
%% 
%% ISSUES
%% 1. Some parms (source_dir, pre/post_hook, etc) and funs like log_dimensions may need more thought
%%    to handle worker_types since these are currently handled outside basho_bench_worker.
%%    May end up with list of pre- and post-hooks to run across multiple drivers, etc. 
%%
%% Pre- and Post-hook should be accept individual values OR lists of hook functions to call
%% OR we could automatically try calling standard per-driver pre and post-hook functions so end users
%% doesnt have to think about it

%% ----------------------------------------------------------------------------
%% SETUP/TEARDOWN: https://github.com/cloudant/perf/issues/35
%% ----------------------------------------------------------------------------
%%
%% Existing code already tries to call a "terminate" function
%%    which is not documented or used in existing drivers
%%
%%     %% Give the driver a chance to cleanup
%%    (catch (State#state.driver):terminate({'EXIT', Reason}, State#state.driver_state)),
%%
%% Current proposal:
%%    Make use of existing new() and terminate() functions for per-worker setUp/tearDown for now
