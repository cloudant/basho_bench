%% Cloudant_benchmark config changes design review
%% https://cloudant.fogbugz.com/f/cases/62351/Improve-basho_bench-config-system-to-meet-cloudant-requirements

%% ------------------------------
%% CONFIGURATION TEMPLATES: 
%% Optional configuration template files that predefine config parameters (Name,Value,ValidatorFun,Description,etc) and preset default values in environment
%% When provided, they would allow us to validate-on-load incoming parameters that match and warn about unknown config params that don't to catch typos
%% Config template files could be nested, used to auto-generate a key-value only config file for local config file use, and would help dumping all config params to run log

{config_templates, ["basho_bench", "cloudant_http", "http_driver"]}.

%% GLOBAL parameters would work as they do now with validation if a template is provided
%%    basho_bench_config:load uses Terms = file:consult(file) then stores these using application:set_env

{option1, 1}.

%% ------------------------------
%% PER-OPERATIONS CONFIGURATION: https://github.com/cloudant/perf/issues/23 and 29
%%
%% Operations would change to allow optional per-operation keygen and valgen
{operations, [
   %% basho_bench_worker and _stats currently read this by looking for exactly two values - Name, Count
   {get, 1},

   %% Using alternate {op,[list]} format would keep 2-tuples so either simple or extended format could be used
   %% QUESTION: Do we need ONLY keygen or the OPTION of BOTH keygen and valgen ? Would we ever need MORE per-op options? 

   {put, [{count,1},  % Alternate way to show count in more complex data structure, existing lookups would need to be modified

          % basho_bench_worker:init would turn these into new Keygen and ValueGen entities and
	  %    then store those into worker State as per-op-config LIST(?) [{put, [{keygen, KeyGen}, {valgen, ValGen}, ...]}, ... ]
          % basho_bench_worker:worker_next_op2 would check for per-op keygen/valgen, potentially push added config onto State

          {key_generator, {int_to_str, {partitioned_sequential_int, 100000}}},
          {value_generator, {function,http_couchdb_driver,make_json_doc,[]}}
	 ]}
   ]}.

%% ------------------------------
%% WORKER_GROUP SUPPORT: https://github.com/cloudant/perf/issues/32
%%
%% "worker_types" would provide per-worker config list, miniature copy of current config file for what is different from global
{worker_types, [
   %% Each worker_type would have its own list of config options to be used on top of global parameters known to basho_bench_config
   {worker_name_a, [ {weight, 5}, 
                     {driver, cb_driver}, 
                     {operations, [
                         {get,1},
                         {put, [ {count,1}, 
                                 {key_generator, keyGen1}
                               ]}
                         ]}, 
                     {other, 1}
                   ]},
   {worker_name_b, []}
   ]}.

{workers, [
   {worker_name_a, 1},
   {worker_name_b, 3}
   ]}.

%% CODING: 
%% "workers" parm provides weighting per worker type
%% basho_bench_worker_sup:init would work like current operations picking, using weights in selecting N copies of each worker_type as child specs instead of one uniform list
%%     could use "concurrent" property to pick how many threads overall but use workers weights for proportions needed. 
%% basho_bench_worker:init would look up worker_type and self initialize from combination of worker_type configs and global information
%% 
%% basho_bench_worker:init 
%%    if config(workers) defined then
%%        1. ask basho_bench_config what worker type it should be 
%%           Modify _config to keep a consumable list of available types that is consumed until all types given out, then reloads list
%%        2. looks up worker type for config overrides 
%%        3. remaining initialization uses the config overrides list ahead of global config info
%%        4. config_overrides are then installed into the driver state as state.local_config
%% 
%% basho_bench_worker:get(Key,Default) and set(Key,Value)
%%    automatically check state.local_config BEFORE basho_bench_config:get and :set

%% ISSUES
%% 1. Some global config params like source_dir, pre/post_hook, etc) and functions liks log_dimensions may need more coding to work for multiple worker types
   
%% ------------------------------
%% SETUP/TEARDOWN: https://github.com/cloudant/perf/issues/35
%%
%% Existing code already tries to call a "terminate" function which is not documented or used in existing drivers
%%     %% Give the driver a chance to cleanup
%%    (catch (State#state.driver):terminate({'EXIT', Reason}, State#state.driver_state)),
%%
%% Option 1: Make automatic calls to driver:setup and driver:terminate using catch so no harm if not defined
%% 
%% Option 2: Add new parameters that explicitly identify functions to call, like driver prehook and posthook work now, assuming current Driver

%%%{worker_setup, SetupFunctionName}.        %% Called at the end of basho_bench_worker:init with the State that gets built up during init
%%%{worker_teardown, TearDownFunctionName}.  %% basho_bench_worker already tries to call State.driver:terminate - could leverage that
