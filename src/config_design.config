%% Cloudant_benchmark config changes design review 

%% ----------------------------------------------------------------------------
%% CONFIGURATION TEMPLATES: (Fogbugz 62351)
%% ----------------------------------------------------------------------------

{config_templates, ["basho_bench", "cloudant_http", "http_driver"]}.

%% IMPLEMENTATION
%% Optional configuration template files to predefine parameters/preset default values
%% Each record would contain something like (Name,Value,ValidatorFun,Description,?MODULE) 
%%
%% Config template files could be nested, 
%%    would allow us to validate-on-load incoming parameters that match
%%    warn about unknown config params to catch typos
%%    used to auto-generate a key-value only config file for local config file use, 
%%    would help dumping ALL config params+doc to run log, not just those provided by user
%% 
%% basho_bench_config:load
%%    would pre-process terms instead of copying directly to application environmant
%%    
%%    if "config_templates" call then loads those config template files, 
%%        saving parameter records into common ETS table
%%        presetting parameter value defaults into environment
%%
%%    else if any templates have been defined,
%%        checks term against known parameter records
%%        if known then checks value with ValidatorFun before saving to environment
%%        else warns about unknown parameters (potential typos) but accepts

%% ----------------------------------------------------------------------------
%% PER-OPERATIONS CONFIGURATION: https://github.com/cloudant/perf/issues/23 and 29
%% ----------------------------------------------------------------------------
%%
%% Operations would change to allow optional per-operation keygen and valgen

{operations, [
   %% basho_bench_worker and _stats expect two values - Name, Count 
   {get, 1},

   %% Using alternate {op,[list]} format keeps 2-tuples so either format could be used
   %% QUESTION: Do we need ONLY keygen or the OPTION of BOTH keygen and valgen ? 
   %%    Would we ever need MORE per-op options? 

   {put, [{count,1},  % Alternate count in more complex format, modify existing lookups
          {key_generator, {int_to_str, {partitioned_sequential_int, 100000}}},
          {value_generator, {function,http_couchdb_driver,make_json_doc,[]}}
	 ]}
   ]}.

%% IMPLEMENTATION:
%% basho_bench_worker:init 
%%    turns per-op config into new Keygen/ValueGen entities
%%    and stores into worker State as per-op-config list
%%        per_op_config =[{put, [{keygen, KeyGen}, {valgen, ValGen}, ...]}, ... ]
%% basho_bench_worker:worker_next_op2 
%%    checks per_op_config, uses as run call arguments,
%%       potentially stores onto State as current keygen/valgen

%% ----------------------------------------------------------------------------
%% WORKER_GROUP SUPPORT: https://github.com/cloudant/perf/issues/32
%% ----------------------------------------------------------------------------
%%
%% "worker_types" would provide per-worker config list,
%%     miniature copy of current config file for what is different from global

{worker_types, [
   %% Each worker_type can have its own list of config options
   %%     to be used on top of global parameters known to basho_bench_config
   {worker_name_a, [ {weight, 5}, 
                     {driver, cb_driver}, 
                     {operations, [
                         {get,1},
                         {put, [ {count,1}, 
                                 {key_generator, keyGen1}
                               ]}
                         ]}, 
                     {other, 1}
                   ]},
   {worker_name_b, []}
   ]}.

{workers, [
   {worker_name_a, 1},
   {worker_name_b, 3}
   ]}.

%% IMPLEMENTATION:
%% The "concurrent" property picks how many workers but use workers weights for proportions needed. 
%%
%% basho_bench_worker_config:next_worker 
%%    pops worker_name off weighted list based on "workers" proportions
%%
%% basho_bench_worker:init 
%%    if next_worker is defined then 
%%        looks up worker type to get per-worker-type config as LocalConfig
%%        uses config_get(Key, LocalConfig) for initialization
%%        stores LocalConfig into state for future use
%%        benchmark applications can use config_get and then save values into own driverState
%% 
%% basho_bench_worker:config_get(Key,Default,LocalConfig) 
%%    checks LocalConfig first then uses basho_bench_config:get for global defaults
%%
%% ISSUES
%% 1. Some parms (source_dir, pre/post_hook, etc) and funs like log_dimensions may need more thought
%%    to handle worker_types since these are currently handled outside basho_bench_worker.
%%    May end up with list of pre- and post-hooks to run across multiple drivers, etc. 


%% ----------------------------------------------------------------------------
%% SETUP/TEARDOWN: https://github.com/cloudant/perf/issues/35
%% ----------------------------------------------------------------------------
%%
%% Existing code already tries to call a "terminate" function
%%    which is not documented or used in existing drivers
%%
%%     %% Give the driver a chance to cleanup
%%    (catch (State#state.driver):terminate({'EXIT', Reason}, State#state.driver_state)),
%%
%% Option 1: Make automatic calls to driver:setup and driver:terminate using (catch)
%% 
%% Option 2: Add new params to explicitly identify functions, like driver pre/post_hook work now

{worker_setup, SetupFunctionName}.  %% Call at end of basho_bench_worker:init with State

{worker_teardown, TearDownFunctionName}.  %% leverage existing call to State.driver:terminate
